#include "file_xrd_pdb_astm_csv.h"

//HEA

bool _file_xrd_pdb_astm_csv::read(std::string &Type, std::string &Tube, std::string &Normalized, std::vector<std::string> &Vec_names, std::vector<std::string> &Vec_formulas, std::vector<std::string> &Vec_elements, _vertex3f &Color, std::vector<float> &Vec_2theta, std::vector<float> &Vec_intensity, std::vector<float> &Vec_d_spacing, std::string &Error)
{
//  float Value;
//  float Position_2theta;
  std::string Text;
  std::vector<std::string>Tokens;

  std::string Token;
//  istringstream Line_stream;
  setlocale(LC_ALL, "C");

  try{
    // type
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Type=Tokens[1];
    if (!(Type==_data_xrd_ns::PDB_type_peaks || Type==_data_xrd_ns::PDB_type_spectral)){
      Error="There is an error for TYPE in file "+File_name+'\n';
      return false;
    }

    // tube
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Tube=Tokens[1];
    if (!(Tube==_data_xrd_ns::PDB_tube_type_Co || Tube==_data_xrd_ns::PDB_tube_type_Cu)){
      Error="There is an error for TUBE in file "+File_name+'\n';
      return false;
    }

    // normalized
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Normalized=Tokens[1];
    if (!(Normalized=="NO" || Normalized=="YES")){
      Error="There is an error for NORMALIZED in file "+File_name+'\n';
      return false;
    }

    // name
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Token=Tokens[1];
    get_tokens(Token,',',Tokens);
    Vec_names=Tokens;

    // formula
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Token=Tokens[1];
    get_tokens(Token,',',Tokens);
    Vec_formulas=Tokens;

    // Elements
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Token=Tokens[1];
    get_tokens(Token,',',Tokens);
    Vec_elements=Tokens;

    // Color
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Token=Tokens[1];
    get_tokens(Token,',',Tokens);
    if (Tokens.size()==3){
      Color.r=stof(Tokens[0]);
      Color.g=stof(Tokens[1]);
      Color.b=stof(Tokens[2]);
    }

    // remove the info line
    get_new_line(File,Token);

    // data
    while (get_new_line(File,Token)){
      get_tokens(Token,';',Tokens);

      // 2theta
      Text=Tokens[0];
      replace(Text.begin(),Text.end(),_common_ns::FROM_DECIMAL_SEPARATOR,_common_ns::TO_DECIMAL_SEPARATOR);
      Vec_2theta.push_back(stof(Text));

      // intensity
      Text=Tokens[1];
      replace(Text.begin(),Text.end(),_common_ns::FROM_DECIMAL_SEPARATOR,_common_ns::TO_DECIMAL_SEPARATOR);
      Vec_intensity.push_back(stof(Text));

      // d spacing
      Text=Tokens[2];
      replace(Text.begin(),Text.end(),_common_ns::FROM_DECIMAL_SEPARATOR,_common_ns::TO_DECIMAL_SEPARATOR);
      Vec_d_spacing.push_back(stof(Text));
    }
  }
  catch(std::exception const& Exception){
    Error="There was an error: "+std::string(Exception.what())+"in file "+File_name+'\n';
    return false;
  }

  return true;
}


//HEA

//void _file_xrd_pdb_astm_csv::write(std::vector<float> &Vec_data)
//{
//  int Num_samples=Vec_data.Num_samples;

//  setlocale(LC_ALL, "C");


//  std::string Text=QString("%1").arg(Vec_data.Version).toStdString();
//  File << "MAPLAB;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  if (Vec_data.File_format==_project_data_ns::_file_format::FILE_FORMAT_TXT) Text="TXT";
//  if (Vec_data.File_format==_project_data_ns::_file_format::FILE_FORMAT_BIN) Text="BIN";
//  File << "FILE_FORMAT;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  File << "AUTHOR;" << Vec_data.Author;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  File << "PROJECT_NAME;" << Vec_data.Project_name;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  File << "DATE;" << Vec_data.Date;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  if (Vec_data.Size_units==_project_data_ns::_units::UNITS_CM) Text="CM";
//  if (Vec_data.Size_units==_project_data_ns::_units::UNITS_MM) Text="MM";
//  if (Vec_data.Size_units==_project_data_ns::_units::UNITS_PX) Text="PX";
//  if (Vec_data.Size_units==_project_data_ns::_units::UNITS_N) Text="-";
//  File << "FILE_FORMAT;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  Text=QString("%1").arg(Vec_data.Width,6,'f').toStdString();
//  File << "WIDTH;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  Text=QString("%1").arg(Vec_data.Height,6,'f').toStdString();
//  File << "HEIGHT;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  if (Vec_data.Normalization==_project_data_ns::_normalization::NORMALIZATION_YES) Text="YES";
//  if (Vec_data.Normalization==_project_data_ns::_normalization::NORMALIZATION_NO) Text="NO";
//  File << "NORMALIZATION;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  if (Vec_data.CS_origin==_project_data_ns::_cs_origin::CS_ORIGIN_TOP_LEFT) Text="TOP_LEFT";
//  if (Vec_data.CS_origin==_project_data_ns::_cs_origin::CS_ORIGIN_BOTTOM_LEFT) Text="BOTTOM_LEFT";
//  File << "CS_ORIGIN;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  Text=QString("%1").arg(Vec_data.Num_samples).toStdString();
//  File << "NUM_SAMPLES;" << Text;
//  for (int i=0;i<Num_samples;i++) File << ";";
//  File << "\n";

//  // coordinates
//  File << "X;-";
//  for (unsigned int i=0;i<Vec_data.Vec_coordinate_x.size();i++){
//    Text=QString("%1").arg(Vec_data.Vec_coordinate_x[i],6,'f').toStdString();
//    File << "; " << Text;
//  }
//  File << "\n";

//  File << "Y;-";
//  for (unsigned int i=0;i<Vec_data.Vec_coordinate_y.size();i++){
//    Text=QString("%1").arg(Vec_data.Vec_coordinate_y[i],6,'f').toStdString();
//    File << "; " << Text;
//  }
//  File << "\n";

//  // elements
//  for (unsigned int i=0;i<Vec_element_data.size();i++){
//    if (Vec_element_data[i].Data_type==_project_data_ns::_data_type::DATA_TYPE_XRF) Text="XRF";
//    if (Vec_element_data[i].Data_type==_project_data_ns::_data_type::DATA_TYPE_XRD) Text="XRD";
//    File << Text << "; ";

//    File << Vec_element_data[i].Name;
//    for (unsigned int j=0;j<Vec_element_data[i].Vec_samples.size();j++){
//      Text=QString("%1").arg(Vec_element_data[i].Vec_samples[j].Value,6,'f').toStdString();
//      File << "; " << Text;
//    }
//    File << "\n";
//  }
//}
