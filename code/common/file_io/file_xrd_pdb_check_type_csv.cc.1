#include "file_xrd_pdb_check_type_csv.h"

//HEA

bool _file_xrd_pdb_check_type_csv::read(std::string &Type, std::string &Error)
{
  float Position_2theta;
  std::string Text;
  std::vector<std::string>Tokens;

  std::string Token;
//  istringstream Line_stream;
  setlocale(LC_ALL, "C");

  try{
    // type
    get_new_line(File,Token);
    get_tokens(Token,';',Tokens);
    Type=Tokens[1];
    if (!(Type==_data_xrd_ns::PDB_type_peaks || Type==_data_xrd_ns::PDB_type_spectral)){
      Error="There is an error for TYPE in file "+File_name+'\n';
      return false;
    }
  }
  catch(std::exception const& Exception){
    Error="There was an error: "+std::string(Exception.what())+"in file "+File_name+'\n';
    return false;
  }

  return true;
}


//HEA

//void _file_xrd_pdb_csv::write(std::string Type, std::string Tube, std::string Normalized, std::string Name, std::string Formula, std::string XRF, std::string Color, float Start_value, std::vector<float> &Vec_data)
//{
//  setlocale(LC_ALL, "C");

//  std::string Position;
//  std::string Value;

//  File << "TYPE;" << Type << std::endl;
//  File << "TUBE;" << Tube << std::endl;
//  File << "NORMALIZED;" << Normalized << std::endl;
//  File << "NAME;" << Name << std::endl;
//  File << "FORMULA;" << Formula << std::endl;
//  File << "XRF;" << XRF << std::endl;
//  File << "COLOR;" << Color << std::endl;

//  for (unsigned int i=0;i<Vec_data.size();i++){
//    Position=QString("%1").arg(Start_value+0.05*float(i),2,'f').toStdString();
//    Value=QString("%1").arg(Vec_data[i],6,'f').toStdString();
//    File << Position << ';' << Value << std::endl;
//  }
//}
